{"version":3,"sources":["js/Task.js","js/TaskDAO.js","js/TaskRender.js","js/ActionManager.js","js/ModalFrame.js","js/TaskService.js","js/index.js"],"names":["Task","text","isCheck","id","Date","now","JSON","stringify","json","taskJSON","parse","TaskDAO","task","window","localStorage","getItem","setItem","task_id","removeItem","tasksOfStorage","fromJSON","tasks","i","length","key","push","clear","TaskResder","Array","isArray","renderedTasks","drawTask","taskTemlate","ActionManager","elem","service","addEventListener","onClick","bind","openAddModal","closeModal","addTask","target","openUpdateModal","updateTask","checkTask","openDeleteAllItemsModal","clearTaskList","openDeleteItemModal","deleteTask","event","action","dataset","buttonAction","ModalFrame","modal","option","modalElem","document","createElement","classList","add","insertAdjacentHTML","body","button","append","create","open","remove","destroy","querySelector","TaskService","taskRender","TaskRender","taskDAO","modalFrame","actionManager","drawAllTasks","tasksHomeElement","getElementById","getAllTasks","sort","a","b","renderTasks","querySelectorAll","forEach","x","taskElem","closest","getTask","value","taskId","close","checked","openDeleteAllItems","openDeleteItem","console","log","removeTask","taskService","start"],"mappings":"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","file":"js.00a46daa.js","sourceRoot":"..\\src","sourcesContent":["export default class Task {\r\n\r\n    constructor(text, isCheck, id) {\r\n        this.text = text;\r\n        this.isCheck = isCheck;\r\n        (id) ? this.id = id: this.id = Date.now();\r\n    }\r\n\r\n    static fromJSON(json) {\r\n        let taskJSON = JSON.parse(json);\r\n        return new Task(taskJSON.text, taskJSON.isCheck, taskJSON.id);\r\n    }\r\n\r\n    toString() {\r\n        return JSON.stringify(this);\r\n    }\r\n}","import Task from \"./Task\";\r\n\r\nexport default class TaskDAO {\r\n\r\n    addTask(task) {\r\n        if (task) {\r\n            let tasksOfStorage = window.localStorage.getItem(task.id);\r\n            if (!tasksOfStorage) {\r\n                window.localStorage.setItem(task.id, task);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    removeTask(task_id) {\r\n        if (task_id) {\r\n            let tasksOfStorage = window.localStorage.getItem(task_id);\r\n            if (tasksOfStorage) {\r\n                window.localStorage.removeItem(task_id);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    getTask(task_id) {\r\n        if (task_id) {\r\n            let tasksOfStorage = window.localStorage.getItem(task_id);\r\n            if (tasksOfStorage) {\r\n                return Task.fromJSON(tasksOfStorage);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    updateTask(task) {\r\n        if (task) {\r\n            let tasksOfStorage = window.localStorage.getItem(task.id);\r\n            if (tasksOfStorage) {\r\n                window.localStorage.setItem(task.id, task);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getAllTasks() {\r\n        let tasks = [];\r\n        for (let i = 0; i < window.localStorage.length; i++) {\r\n            let key = window.localStorage.key(i);\r\n            let taskJSON = window.localStorage.getItem(key);\r\n            tasks.push(Task.fromJSON(taskJSON));\r\n        }\r\n        return tasks;\r\n    }\r\n\r\n    clear() {\r\n        window.localStorage.clear();\r\n    }\r\n}","export default class TaskResder {\r\n\r\n    renderTasks(tasks) {\r\n        if (tasks && Array.isArray(tasks)) {\r\n            let renderedTasks = \"\";\r\n            for (let task of tasks) {\r\n                renderedTasks += this.drawTask(task) + \"\\n\";\r\n            }\r\n            return renderedTasks;\r\n        }\r\n\r\n    }\r\n\r\n    drawTask(task) {\r\n        if (task) {\r\n            let taskTemlate = `<div id=\"${task.id}\" class=\"task\">\r\n            <input type=\"checkbox\" data-button-action=\"check\" title=\"Check it if task is done\"\" ${(task.isCheck)? \"checked\": \"\"}>\r\n            <input type=\"text\" size=\"40\" disabled value=\"${task.text}\">\r\n            <button class=\"task-button\" data-button-action=\"update\" title=\"Edit task\"></button>\r\n            <button class=\"task-button\" data-button-action=\"delete\" title=\"Delete task\"></button>\r\n         </div>`;\r\n            return taskTemlate;\r\n        }\r\n    }\r\n}","export default class ActionManager {\r\n    constructor(elem, service) {\r\n        this.elem = elem;\r\n        this.service = service;\r\n        elem.addEventListener(\"click\", this.onClick.bind(this));\r\n    }\r\n\r\n    add() {\r\n        this.service.openAddModal();\r\n    }\r\n\r\n    closeModal() {\r\n        this.service.closeModal();\r\n    }\r\n\r\n    addTask() {\r\n        this.service.addTask();\r\n\r\n    }\r\n\r\n    update(target) {\r\n        this.service.openUpdateModal(target);\r\n    }\r\n\r\n    updateTask(target) {\r\n        this.service.updateTask(target);\r\n    }\r\n\r\n    check(target) {\r\n        this.service.checkTask(target);\r\n    }\r\n\r\n    clearAll() {\r\n        this.service.openDeleteAllItemsModal();\r\n    }\r\n\r\n    clearAllTasks() {\r\n        this.service.clearTaskList();\r\n\r\n    }\r\n\r\n    delete(target) {\r\n        this.service.openDeleteItemModal(target);\r\n    }\r\n\r\n    deleteTask(target) {\r\n        this.service.deleteTask(target);\r\n    }\r\n\r\n    onClick(event) {\r\n        let action = event.target.dataset.buttonAction;\r\n        if (action) {\r\n            this[action](event.target);\r\n        }\r\n    }\r\n}","export default class ModalFrame {\r\n\r\n    constructor() {\r\n        this.modal;\r\n    }\r\n\r\n    create(option) {\r\n        let modalElem = document.createElement(\"div\");\r\n        modalElem.classList.add(\"modal\");\r\n        modalElem.insertAdjacentHTML(\"afterbegin\", `\r\n    <div class=\"modal-overlay\">\r\n        <div class=\"message-box\">\r\n            <div class=\"cancel-button-box\">\r\n                <button class=\"task-button\" data-button-action=\"closeModal\">&times;</button>\r\n            </div>\r\n            <div class=\"message-box-main\">\r\n                <div class=\" message-box-text \">\r\n            ${option.body}\r\n                </div>\r\n                <div class=\"message-box-buttons \">\r\n                ${option.button}\r\n                    <button class=\"message-button\" data-button-action=\"closeModal\">Cancel</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>  \r\n    `);\r\n        document.body.append(modalElem);\r\n        this.modal = modalElem;\r\n    }\r\n\r\n\r\n    openAddModal() {\r\n        let option = {\r\n            body: \"<p>Enter task message</p><input id='messageText' type='text'>\",\r\n            button: \"<button class='message-button' data-button-action='addTask'>Ok</button>\"\r\n        }\r\n        this.create(option);\r\n        this.open();\r\n    }\r\n\r\n    openUpdateModal(task) {\r\n        let option = {\r\n            body: `<p>Enter new task message</p><input id='messageText' type='text' value=\"${task.text}\">`,\r\n            button: `<button class='message-button' data-button-action='updateTask' data-task-id=\"${task.id}\">Ok</button>`\r\n        }\r\n        this.create(option);\r\n        this.open();\r\n    }\r\n\r\n\r\n\r\n    openDeleteAllItems() {\r\n        let option = {\r\n            body: \"<p>Do you really want to delete all tasks?</p>\",\r\n            button: \"<button class='message-button' data-button-action='clearAllTasks'>Delete</button>\"\r\n        }\r\n        this.create(option);\r\n        this.open();\r\n\r\n    }\r\n\r\n    openDeleteItem(task_id) {\r\n        let option = {\r\n            body: \"<p>Do you really want to delete this tasks</p>\",\r\n            button: `<button class='message-button' data-button-action='deleteTask' data-task-id='${task_id}'>Delete</button>`\r\n        }\r\n        this.create(option);\r\n        this.open();\r\n\r\n    }\r\n\r\n    open() {\r\n        this.modal.classList.add(\"open\");\r\n    }\r\n    close() {\r\n        this.modal.classList.remove(\"open\");\r\n        this.destroy();\r\n    }\r\n    destroy() {\r\n        document.querySelector(\".modal\").remove();\r\n    }\r\n}","import TaskDAO from \"./TaskDAO.js\"\r\nimport TaskRender from \"./TaskRender.js\"\r\nimport ActionManager from \"./ActionManager.js\"\r\nimport ModalFrame from \"./ModalFrame.js\"\r\nimport Task from \"./Task.js\";\r\n\r\nexport default class TaskService {\r\n\r\n    constructor() {\r\n        this.taskRender = new TaskRender();\r\n        this.taskDAO = new TaskDAO();\r\n        this.modalFrame = new ModalFrame();\r\n    }\r\n\r\n    start() {\r\n        this.actionManager = new ActionManager(document.body, this);\r\n        this.taskDAO.clear();\r\n        this.drawAllTasks();\r\n    }\r\n\r\n    drawAllTasks() {\r\n        let tasksHomeElement = document.getElementById(\"tasks\");\r\n        let tasks = this.taskDAO.getAllTasks();\r\n        tasks.sort((a, b) => a.id - b.id);\r\n        let renderedTasks = this.taskRender.renderTasks(tasks);\r\n        document.querySelectorAll(\".task\").forEach((x) => x.remove());\r\n        tasksHomeElement.insertAdjacentHTML(\"afterbegin\", renderedTasks);\r\n    }\r\n\r\n    openUpdateModal(target) {\r\n        let taskElem = target.closest(\".task\");\r\n        let task_id = taskElem.id;\r\n        let task = this.taskDAO.getTask(task_id);\r\n        this.modalFrame.openUpdateModal(task);\r\n    }\r\n\r\n    updateTask(target) {\r\n        let elem = document.getElementById(\"messageText\");\r\n        let text = elem.value;\r\n        let task_id = target.dataset.taskId;\r\n        let task = this.taskDAO.getTask(task_id);\r\n        task.text = text;\r\n        this.taskDAO.updateTask(task);\r\n        this.drawAllTasks();\r\n        this.modalFrame.close();\r\n    }\r\n\r\n    checkTask(target) {\r\n        let taskElem = target.closest(\".task\");\r\n        let task_id = taskElem.id;\r\n        let task = this.taskDAO.getTask(task_id);\r\n        task.isCheck = target.checked;\r\n        this.taskDAO.updateTask(task);\r\n        this.drawAllTasks();\r\n        this.modalFrame.close();\r\n    }\r\n\r\n    openAddModal() {\r\n        this.modalFrame.openAddModal();\r\n    }\r\n\r\n    closeModal() {\r\n        this.modalFrame.close();\r\n    }\r\n\r\n    openDeleteAllItemsModal() {\r\n        this.modalFrame.openDeleteAllItems();\r\n    }\r\n\r\n    openDeleteItemModal(target) {\r\n        let task = target.closest(\".task\");\r\n        let task_id = task.id;\r\n        this.modalFrame.openDeleteItem(task_id);\r\n    }\r\n\r\n    addTask() {\r\n        let elem = document.getElementById(\"messageText\");\r\n        let text = elem.value;\r\n        let task = new Task(text, false);\r\n        this.taskDAO.addTask(task);\r\n        this.drawAllTasks();\r\n        this.modalFrame.close();\r\n    }\r\n\r\n    deleteTask(target) {\r\n        console.log();\r\n        let task_id = target.dataset.taskId;\r\n        this.taskDAO.removeTask(task_id);\r\n        this.modalFrame.close();\r\n        this.drawAllTasks();\r\n    }\r\n\r\n\r\n    clearTaskList() {\r\n        this.taskDAO.clear();\r\n        this.modalFrame.close();\r\n        this.drawAllTasks();\r\n    }\r\n\r\n}","import TaskService from \"./TaskService.js\"\n\nlet taskService = new TaskService();\ntaskService.start();"]}